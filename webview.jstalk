// WebView tests (shift alt ctrl y)

/**
 * The first script call creates the panel with the saved HTML page.
 * The following script calls execute the JavaScript calls in the webView.
 */

// Add a hint to whomever is instantiating us,
// that we'd like to stick around for a while.
coscript.shouldKeepAround = true;

// Include additionl frameworks.
framework('WebKit');
framework('AppKit');

// Import the persistence handler.
#import 'lib/persistence.jstalk'

// Define a WebViewLoad delegate function - should be converted to an ObjC class.
// See https://github.com/logancollins/Mocha
var WebViewLoadDelegate = function () {};

// Add the initiating delegate (callback) function.
WebViewLoadDelegate.prototype.webView_didClearWindowObject_forFrame = function (sender, scriptObject, frame) {
  var jswrapper = 'try {[[js]]} catch (e) {e.toString();}',
    jscode = 'document.body.innerHTML;',
    js = jswrapper.replace('[[js]]', jscode);

  var result = scriptObject.evaluateWebScript(js);
  log(result);
};

// Add the delegate (callback) function which is called when the page has loaded.
WebViewLoadDelegate.prototype.webView_didFinishLoadForFrame = function (sender, frame) {
  var jswrapper = 'try {[[js]]} catch (e) {e.toString();}',
    jscode = 'document.body.innerHTML;',
    js = jswrapper.replace('[[js]]', jscode);

  var scriptObject = sender.windowScriptObject();

  var result = scriptObject.evaluateWebScript(js);
  log(result);
};

// Prepare the function that will be used as an object added to the
// scriptObject. The object should be visible with it's methods and properties
// from the page JavaScript and should be usable to call Sketch script
// functions from the page JavaScript.
var runThis = function runThis () {
  var that = function () {};

  // Property visible to JavaScript.
  that.fixed = "Property named fixed";
  // Method visible to JavaScript.
  that.log = function () {
    log('Called from JavaScript via the Sketch script RunThis object.');
    return true;
  };
  // Method returns whether a selector should be hidden
  // from the scripting environment. If "false" is returned none is hidden.
  that.isSelectorExcludedFromWebScript = function (selector) {
    log('selector');
    log(selector);
    return false;
  };
  // Method returns whether a key should be hidden
  // from the scripting environment. If "false" is returned none is hidden.
  that.isKeyExcludedFromWebScript = function (key) {
    log('key');
    log(key);
    return false;
  };

  return that;
};

// Set the url to the saved webpage
// Split the scriptpath into an array, remove last item which is
// the script name, create a string from the array again and wrap the
// path with 'file://' and the html file name.
var URL = '';
var scriptpath = sketch.scriptPath.split('/');

scriptpath.pop();
scriptpath = scriptpath.join('/') + '/';
URL = encodeURI('file://' + scriptpath + 'www/index.html');

/**
 * Prepare the panel, show it and save it into the persistent store.
 */
var setupWebViewPanel = function () {
  // Prepare the panel:
  // Set the panel size and
  // initialize the webview and load the URL
  var frame = NSMakeRect(0, 0, 600, 480);
  var webView = WebView.alloc().initWithFrame(frame);
  var webViewFrame = webView.mainFrame();

  // The FrameLoadDelegate offers the webView_didFinishLoadForFrame
  // method which is called when the web page is loaded.
  // !!! The methods never fire because:
  // - it is implemented wrong?
  // - the delegate's method never is called because the script ends before the
  //   page is loaded?
  var loadDelegate = new WebViewLoadDelegate();
  webView.setFrameLoadDelegate(loadDelegate);

  webViewFrame.loadRequest(NSURLRequest.requestWithURL(NSURL.URLWithString(URL)));

  // Set up the panel window
  var mask = NSTitledWindowMask + NSClosableWindowMask + NSMiniaturizableWindowMask + NSResizableWindowMask + NSUtilityWindowMask;
  var panel = NSPanel.alloc().initWithContentRect_styleMask_backing_defer(frame, mask, NSBackingStoreBuffered, true);

  // Add the webView to the prepared panel
  panel.contentView().addSubview(webView);

  // Show the panel
  panel.makeKeyAndOrderFront(panel);

  // persist the panel and the webView.
  persist.set('panel', panel);
  persist.set('webView', webView);
};

var doScript = function () {
  var jswrapper = 'try {[[js]]} catch (e) {e.toString();}',
    jscode = '',
    js = jswrapper.replace('[[js]]', jscode);

  // var result = webView.stringByEvaluatingJavaScriptFromString(js);

  // Get the windowScriptObject as the scripting connector
  var scriptObject = webView.windowScriptObject();

  // Add the RunThis object with the key 'callThis'. The callThis
  // object should be accessible by the page JavaScript.
  // !!! The object is seen by the page JavaScript but the methods/porperties
  // are not present.
  var runThisFunc = runThis();
  scriptObject.setValue_forKey(runThisFunc, 'callThis');

  // Add a text line.
  jscode = 'de.unodo.writeTest("From the Sketch script ' + new Date() + '");';
  js = jswrapper.replace('[[js]]', jscode);
  var result = scriptObject.evaluateWebScript(js);
  log(result);

  // Call the callback function to check if the 'callThis' class is visible
  // in the page for JavaScript.
  jscode = 'de.unodo.callBack();';
  js = jswrapper.replace('[[js]]', jscode);
  var result = scriptObject.evaluateWebScript(js);
  log(result);

  // Get the form data.
  jscode = 'de.unodo.getFormData();';
  js = jswrapper.replace('[[js]]', jscode);
  var result = scriptObject.evaluateWebScript(js);
  log('Formfield "Name" value: ' + result);
};

var panel = persist.get('panel');
var webView = persist.get('webView');

// If the panel does not exisit (null is returned from persist.get),
// set the panel up and show it.
// Else make the panel the front window and run the JavaScript functions.
if (panel === null) {
  log('setupWebViewPanel');
  setupWebViewPanel();
} else {
  // Show the panel
  panel.makeKeyAndOrderFront(panel);

  // var loadDelegate = new WebViewLoadDelegate;
  // webView.setFrameLoadDelegate(loadDelegate);

  // Run the scripts
  doScript();
}

log('done');
